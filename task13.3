{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"13JAPIsak7EVV_5yJGTj_GkBXhnk7HhXA","authorship_tag":"ABX9TyOwecRg/VUDq/W/jHfpCBLd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","import gzip\n","import pickle\n","import random\n","from keras.datasets import mnist"],"metadata":{"id":"Q9NPjarh3tQp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**load the MNIST dataset**"],"metadata":{"id":"8cNLEJdiJehN"}},{"cell_type":"code","source":["def load_data():\n","    # Download the MNIST dataset\n","    (train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","    # Combine and split data into training, validation and test sets\n","    train_data = (train_images.reshape(60000, 784), train_labels)\n","    validation_data = (test_images.reshape(10000, 784)[:5000], test_labels[:5000])\n","    test_data = (test_images.reshape(10000, 784)[5000:], test_labels[5000:])\n","\n","    return train_data, validation_data, test_data\n"],"metadata":{"id":"NLIomK9AJdI4","executionInfo":{"status":"ok","timestamp":1726581562923,"user_tz":-180,"elapsed":311,"user":{"displayName":"Rowan Mokhtar","userId":"02665242435787024209"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":[" **sigmoid function**"],"metadata":{"id":"GrqTsijHJy9X"}},{"cell_type":"code","source":["def sigmoid(z):\n","    return 1.0 / (1.0 + np.exp(-z))\n","\n","def sigmoid_prime(z):\n","    return sigmoid(z) * (1 - sigmoid(z))\n"],"metadata":{"id":"26B2KzrhKOGo","executionInfo":{"status":"ok","timestamp":1726581570493,"user_tz":-180,"elapsed":5,"user":{"displayName":"Rowan Mokhtar","userId":"02665242435787024209"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["**neural network class**"],"metadata":{"id":"Ld82PBy9KU28"}},{"cell_type":"code","source":["class NeuralNetwork:\n","    def __init__(self, sizes):\n","        self.num_layers = len(sizes)\n","        self.sizes = sizes\n","        self.biases = [np.random.randn(y, 1) for y in sizes[1:]]\n","        self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]\n","\n","    def feedforward(self, a):\n","        for b, w in zip(self.biases, self.weights):\n","            a = sigmoid(np.dot(w, a) + b)\n","        return a\n","\n","    def SGD(self, training_data, epochs, mini_batch_size, eta, test_data=None):\n","        if test_data:\n","            n_test = len(test_data)\n","        n = len(training_data)\n","        for j in range(epochs):\n","            random.shuffle(training_data)\n","            mini_batches = [training_data[k:k + mini_batch_size] for k in range(0, n, mini_batch_size)]\n","            for mini_batch in mini_batches:\n","                self.update_mini_batch(mini_batch, eta)\n","            if test_data:\n","                print(f'Epoch {j}: {self.evaluate(test_data)} / {n_test}')\n","            else:\n","                print(f'Epoch {j} complete')\n","\n","    def update_mini_batch(self, mini_batch, eta):\n","        nabla_b = [np.zeros(b.shape) for b in self.biases]\n","        nabla_w = [np.zeros(w.shape) for w in self.weights]\n","        for x, y in mini_batch:\n","            delta_nabla_b, delta_nabla_w = self.backprop(x, y)\n","            nabla_b = [nb + dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]\n","            nabla_w = [nw + dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]\n","        self.weights = [w - (eta / len(mini_batch)) * nw for w, nw in zip(self.weights, nabla_w)]\n","        self.biases = [b - (eta / len(mini_batch)) * nb for b, nb in zip(self.biases, nabla_b)]\n","\n","    def backprop(self, x, y):\n","        nabla_b = [np.zeros(b.shape) for b in self.biases]\n","        nabla_w = [np.zeros(w.shape) for w in self.weights]\n","        # Feedforward\n","        activation = x\n","        activations = [x]  # List to store all the activations, layer by layer\n","        zs = []  # List to store all the z vectors, layer by layer\n","        for b, w in zip(self.biases, self.weights):\n","            z = np.dot(w, activation) + b\n","            zs.append(z)\n","            activation = sigmoid(z)\n","            activations.append(activation)\n","        # Backward pass\n","        delta = self.cost_derivative(activations[-1], y) * sigmoid_prime(zs[-1])\n","        nabla_b[-1] = delta\n","        nabla_w[-1] = np.dot(delta, activations[-2].transpose())\n","        # Here, l = 1 means the last layer of neurons, l = 2 is the second-to-last layer, and so on\n","        for l in range(2, self.num_layers):\n","            z = zs[-l]\n","            sp = sigmoid_prime(z)\n","            delta = np.dot(self.weights[-l + 1].transpose(), delta) * sp\n","            nabla_b[-l] = delta\n","            nabla_w[-l] = np.dot(delta, activations[-l - 1].transpose())\n","        return (nabla_b, nabla_w)\n","\n","    def evaluate(self, test_data):\n","        test_results = [(np.argmax(self.feedforward(x)), y) for (x, y) in test_data]\n","        return sum(int(x == y) for (x, y) in test_results)\n","\n","    def cost_derivative(self, output_activations, y):\n","        return (output_activations - y)"],"metadata":{"id":"PxF8U54KLo7U","executionInfo":{"status":"ok","timestamp":1726581571382,"user_tz":-180,"elapsed":483,"user":{"displayName":"Rowan Mokhtar","userId":"02665242435787024209"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["**training and testing**"],"metadata":{"id":"ERjGVvggL6Rh"}},{"cell_type":"code","source":["def vectorized_result(j):\n","    e = np.zeros((10, 1))\n","    e[j] = 1.0\n","    return e\n","\n","def load_data_wrapper():\n","    tr_d, va_d, te_d = load_data()\n","    training_inputs = [np.reshape(x, (784, 1)) for x in tr_d[0]]\n","    training_results = [vectorized_result(y) for y in tr_d[1]]\n","    training_data = list(zip(training_inputs, training_results))\n","    validation_inputs = [np.reshape(x, (784, 1)) for x in va_d[0]]\n","    validation_data = list(zip(validation_inputs, va_d[1]))\n","    test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]\n","    test_data = list(zip(test_inputs, te_d[1]))\n","    return (training_data, validation_data, test_data)"],"metadata":{"id":"RxdmO5mJL8m2","executionInfo":{"status":"ok","timestamp":1726581578823,"user_tz":-180,"elapsed":1006,"user":{"displayName":"Rowan Mokhtar","userId":"02665242435787024209"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Load the data\n","training_data, validation_data, test_data = load_data_wrapper()\n","\n","# Initialize and train the neural network\n","net = NeuralNetwork([784, 30, 10])  # Network with 784 inputs, 30 hidden neurons, and 10 output neurons\n","net.SGD(training_data, 30, 10, 3.0, test_data=test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnoup2GnMMKV","outputId":"9f832914-8ea1-4b3e-8273-fa49bf079541","executionInfo":{"status":"ok","timestamp":1726582350085,"user_tz":-180,"elapsed":496788,"user":{"displayName":"Rowan Mokhtar","userId":"02665242435787024209"}}},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-ec0be852a3ab>:2: RuntimeWarning: overflow encountered in exp\n","  return 1.0 / (1.0 + np.exp(-z))\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 0: 913 / 5000\n","Epoch 1: 1458 / 5000\n","Epoch 2: 968 / 5000\n","Epoch 3: 1005 / 5000\n","Epoch 4: 1358 / 5000\n","Epoch 5: 1579 / 5000\n","Epoch 6: 652 / 5000\n","Epoch 7: 1446 / 5000\n","Epoch 8: 1332 / 5000\n","Epoch 9: 1125 / 5000\n","Epoch 10: 971 / 5000\n","Epoch 11: 1069 / 5000\n","Epoch 12: 1061 / 5000\n","Epoch 13: 1102 / 5000\n","Epoch 14: 1071 / 5000\n","Epoch 15: 1158 / 5000\n","Epoch 16: 1084 / 5000\n","Epoch 17: 1070 / 5000\n","Epoch 18: 1236 / 5000\n","Epoch 19: 1239 / 5000\n","Epoch 20: 1193 / 5000\n","Epoch 21: 1243 / 5000\n","Epoch 22: 1193 / 5000\n","Epoch 23: 1243 / 5000\n","Epoch 24: 1309 / 5000\n","Epoch 25: 1212 / 5000\n","Epoch 26: 723 / 5000\n","Epoch 27: 832 / 5000\n","Epoch 28: 1179 / 5000\n","Epoch 29: 1269 / 5000\n"]}]}]}